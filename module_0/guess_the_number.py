# Проект 0. Курс: DST-PRO
# Поток: DSPR-1
#
# Задача: попробуйте улучшить алгоритм автора модуля
# 
# Автор: https://github.com/13gi
# Репозиторий: https://github.com/13gi/skillfactory_rds/tree/master/module_0
#
# Аннтоация
#   game_core_v3
#     алгоритм V3: угадывает число в среднем за 7 попыток.
#
#   game_core_v4
#     алгоритм V4: угадывает число в среднем за 5 попыток.



# -------------------------------------------
#  Начальные условия
# -------------------------------------------
# Диапазон чисел для игры - указываем границы слева (входит) и справа(не входит в диапазон)

range_border_left = 1
range_border_right = 101


def score_game(game_core):
    ''' Функция расчета среднего результата.
        Запускаем игру 1000 раз, чтобы узнать, как быстро игра угадывает число'''
    # инициируем массив, в который соберем потребовашееся количество попыток для отгдаывания числа
    count_ls = []
    # фиксируем RANDOM SEED, чтобы ваш эксперимент был воспроизводим!
    np.random.seed(1)  
    
    # наполняем массив 1000 случайными числами для угадывания
    random_array = np.random.randint(range_border_left, range_border_right, size=(1000))
    
    # запускаем циклически функцию отгадывания числа и собираем массив из количества попыток
    for number in random_array:
        count_ls.append(game_core(number))
    
    # получаем среднее значение числа попыток
    score_mean = int(np.mean(count_ls))
    
    print(f"Ваш алгоритм угадывает число в среднем за {score_mean} попыток")
    # возращаем среднее число попыток
    return(score_mean)


def game_core_v3(number):
    ''' Сначала берем середину промежетука, а потом сдвигаем границы влево или в право, чтобы брать random число
        из постоянно сжимающегося промежутка вокруг искомого числа '''
    # инициируем число попыток
    count = 1
    # Инициируем левую и правую границу диапазона отгадывания числа
    shifting_range_left = range_border_left
    shifting_range_right = range_border_right
    
    # при первой попытке пробуем угадать, используя число из середины диапазона
    predict = shifting_range_right // 2
    
    # в цикле будем угадывать число и сдвигать границы к угадаываемому числу
    while number != predict:
        # если мы попали ниже загаданного числа
        if number > predict: 
            # то сдвигаем левую границу диапазона и добавляем 1 так текущая граница точно не загаданное число
            shifting_range_left = predict + 1
        # если мы попали выше загаданного числа
        elif number < predict: 
            # то сдвигаем правую границу
            shifting_range_right = predict
        
        # берем случайное число из обновленного диапазона - сдвинутого к угадаываемому числу
        predict = np.random.randint(shifting_range_left, shifting_range_right)
        # увеличием количество попыток
        count += 1
        
    # выход из цикла, если угадали, возвращаем число попыток
    return(count) 


def game_core_v4(number):
    ''' Сначала берем серидину промежетука, а потом сдвигаем границы влево или вправо, берем опять серидину промежутка.
        таким образом делим всегда промежуток пополоам пока не дойдем до искомого числа'''
    
    # инициируем число попыток, левую и правую границу диапазона отгадывания числа
    count = 1
    shifting_range_left = range_border_left
    shifting_range_right = range_border_right
    
    # пробуем угадать, используя число из середины диапазона
    predict = shifting_range_right//2
    
    # в цикле будем угадывать число и сдвигать границы к угадаываемому числу
    while number != predict:
         # если мы попали ниже загаданного числа
        if number > predict: 
            # то сдвигаем левую границу диапазона
            shifting_range_left = predict
        # если мы попали выше загаданного числа
        elif number < predict: 
            # то сдвигаем правую границу
            shifting_range_right = predict
        
        # пробуем угадать, используя число из середины диапазона
        predict = (shifting_range_right + shifting_range_left)//2
        # увеличием количество попыток
        count += 1
        
    # выход из цикла, если угадали    
    return(count) 



# запускаем на проверку первый вариант
score_game(game_core_v3)

# запускаем на проверку улучшенный вариант
score_game(game_core_v4)


